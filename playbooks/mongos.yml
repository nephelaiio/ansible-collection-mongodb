---
- name: Gather cluster facts
  hosts:
    - "{{ __mongodb_config }}"
    - "{{ __mongodb_shard1 }}"
    - "{{ __mongodb_mongos }}"
  become: true
  vars_files:
    - main.yml


- name: Deploy MongoDB Mongos servers
  hosts: "{{ __mongodb_mongos }}"
  become: true
  serial: 1
  vars_files:
    - main.yml
  vars:
    _config_hosts: "{{ groups[__mongodb_config] }}"
    _config_addrs: "{{ _config_hosts | map('extract', hostvars, __mongodb_address_attrs) | list }}"
    mongos_replicaset_config_members: "{{ _config_hosts if _mongodb_hosts_manage else _config_addrs }}"
  tasks:
    - name: Create virtualenv
      ansible.builtin.tempfile:
        state: directory
        prefix: .virtualenv
        path: "~"
      register: _virtualenv_tmpdir
      changed_when: false

    - name: Initialize virtualenv
      ansible.builtin.pip:
        name:
          - pymongo
          - python-gnupg
        virtualenv: "{{ _virtualenv_tmpdir.path }}/venv"
      changed_when: false

    - name: Deploy Mongos services
      when: mongodb_shard_clusters is defined
      run_once: true
      vars:
        ansible_python_interpreter: "{{ _virtualenv_tmpdir.path }}/venv/bin/python"
      block:
        - name: Configure MongoDB repo
          ansible.builtin.include_role:
            name: nephelaiio.mongodb.repo

        - name: Deploy Mongos services
          ansible.builtin.include_role:
            name: nephelaiio.mongodb.mongos

      always:
        - name: Destroy virtualenv
          ansible.builtin.file:
            path: "{{ _virtualenv_tmpdir.path }}"
            state: absent
          changed_when: false


- name: Configure MongoDB cluster
  hosts: "{{ __mongodb_mongos }}"
  become: true
  vars_files:
    - main.yml
  tasks:
    - name: Create virtualenv
      ansible.builtin.tempfile:
        state: directory
        prefix: .virtualenv
        path: "~"
      register: _virtualenv_tmpdir
      changed_when: false

    - name: Initialize virtualenv
      ansible.builtin.pip:
        name:
          - pymongo
          - python-gnupg
        virtualenv: "{{ _virtualenv_tmpdir.path }}/venv"
      changed_when: false

    - name: Register cluster shards
      when: mongodb_shard_clusters is defined
      run_once: true
      vars:
        ansible_python_interpreter: "{{ _virtualenv_tmpdir.path }}/venv/bin/python"
      block:
        - name: Query registered shards
          community.mongodb.mongodb_shell:
            db: "admin"
            eval: "db.runCommand({listshards: 1})"
          register: _shard_query
          changed_when: false

        - name: Debug shard cluster list
          ansible.builtin.debug:
            msg: "Cluster shards: {{ _shards | map(attribute='_id') | list | join (',') }}"
          vars:
            _shards: "{{ _shard_query.transformed_output.shards }}"

        - name: Register shards
          community.mongodb.mongodb_shell:
            db: "admin"
            eval: "sh.addShard('{{ _shard }}')"
          vars:
            _hostnames: "{{ groups[item.group] }}"
            _addresses: "{{ _hostnames | map('extract', hostvars, __mongodb_address_attrs) | list }}"
            _hosts: "{{ _hostnames if _mongodb_hosts_manage else _addresses }}"
            _members: "{{ _hosts | map('nephelaiio.plugins.map_format', '%s:' + _mongodb_port) }}"
            _shard: "{{ item.name }}/{{ _members | join(',') }}"
            _shard_ids: "{{ _shard_query.transformed_output.shards | map(attribute='_id') | list }}"
          loop_control:
            label: "{{ _shard }}"
          loop: "{{ mongodb_shard_clusters }}"
          when: item.name not in _shard_ids

        - name: Refresh registered shard clusters
          community.mongodb.mongodb_shell:
            db: "admin"
            eval: "db.runCommand({listshards: 1})"
          register: _shard_query
          changed_when: false

        - name: Debug shard cluster list
          ansible.builtin.debug:
            msg: "Cluster shards: {{ _shards | map(attribute='_id') | list | join (',') }}"
          vars:
            _shards: "{{ _shard_query.transformed_output.shards }}"

      always:
        - name: Destroy virtualenv
          ansible.builtin.file:
            path: "{{ _virtualenv_tmpdir.path }}"
            state: absent
          changed_when: false
