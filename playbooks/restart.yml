---
- name: Restart config services
  serial: 1
  hosts: "{{ __mongodb_config }}"
  become: true
  vars_files:
    - main.yml
  tasks:
    - name: Create virtualenv
      ansible.builtin.tempfile:
        state: directory
        prefix: .virtualenv
        path: "~"
      register: _virtualenv_tmpdir
      changed_when: false

    - name: Initialize virtualenv
      ansible.builtin.pip:
        name:
          - pymongo
          - python-gnupg
        virtualenv: "{{ _virtualenv_tmpdir.path }}/venv"
      changed_when: false

    - name: Deploy MongDB config replicaset
      vars:
        ansible_python_interpreter: "{{ _virtualenv_tmpdir.path }}/venv/bin/python"
      block:
        - name: Include Mongos service tasks
          ansible.builtin.include_role:
            name: nephelaiio.mongodb.mongodb
            tasks_from: service
          vars:
            mongos_service_state: restarted

        - name: Wait for replica set to stabilize
          community.mongodb.mongodb_status:
            replica_set: "{{ mongos_replicaset_config_name | default('config') }}"
            validate: minimal
            poll: "{{ _mongodb_reconfig_poll }}"
            interval: "{{ _mongodb_reconfig_interval }}"

      always:
        - name: Destroy virtualenv
          ansible.builtin.file:
            path: "{{ _virtualenv_tmpdir.path }}"
            state: absent
          changed_when: false


- name: Restart shard1 services
  serial: 1
  hosts: "{{ __mongodb_shard1 }}"
  become: true
  vars_files:
    - main.yml
  tasks:
    - name: Create virtualenv
      ansible.builtin.tempfile:
        state: directory
        prefix: .virtualenv
        path: "~"
      register: _virtualenv_tmpdir
      changed_when: false

    - name: Initialize virtualenv
      ansible.builtin.pip:
        name:
          - pymongo
          - python-gnupg
        virtualenv: "{{ _virtualenv_tmpdir.path }}/venv"
      changed_when: false

    - name: Deploy MongDB config replicaset
      vars:
        ansible_python_interpreter: "{{ _virtualenv_tmpdir.path }}/venv/bin/python"
      block:
        - name: Include Mongos service tasks
          ansible.builtin.include_role:
            name: nephelaiio.mongodb.mongodb
            tasks_from: service
          vars:
            mongos_service_state: restarted

        - name: Wait for replica set to stabilize
          community.mongodb.mongodb_status:
            replica_set: "{{ mongos_replicaset_shard1_name | default('shard1') }}"
            validate: minimal
            poll: "{{ _mongodb_reconfig_poll }}"
            interval: "{{ _mongodb_reconfig_interval }}"

      always:
        - name: Destroy virtualenv
          ansible.builtin.file:
            path: "{{ _virtualenv_tmpdir.path }}"
            state: absent
          changed_when: false


- name: Restart Mongos services
  hosts: "{{ __mongodb_mongos }}"
  become: true
  serial: 1
  vars_files:
    - main.yml
  tasks:
    - name: Create virtualenv
      ansible.builtin.tempfile:
        state: directory
        prefix: .virtualenv
        path: "~"
      register: _virtualenv_tmpdir
      changed_when: false

    - name: Initialize virtualenv
      ansible.builtin.pip:
        name:
          - pymongo
          - python-gnupg
        virtualenv: "{{ _virtualenv_tmpdir.path }}/venv"
      changed_when: false

    - name: Deploy MongDB config replicaset
      vars:
        ansible_python_interpreter: "{{ _virtualenv_tmpdir.path }}/venv/bin/python"
      block:
        - name: Include Mongos service tasks
          ansible.builtin.include_role:
            name: nephelaiio.mongodb.mongos
            tasks_from: service
          vars:
            mongos_service_state: restarted

        - name: Check Mongos cluster status
          community.mongodb.mongodb_shell:
            login_database: "admin"
            eval: "sh.status()"
          retries: "{{ _mongodb_reconfig_poll }}"
          delay: "{{ _mongodb_reconfig_interval }}"
          changed_when: false

      always:
        - name: Destroy virtualenv
          ansible.builtin.file:
            path: "{{ _virtualenv_tmpdir.path }}"
            state: absent
          changed_when: false
